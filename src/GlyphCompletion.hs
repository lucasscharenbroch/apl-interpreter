module GlyphCompletion where
import System.Console.Haskeline

glyphs :: [(String, String)]
glyphs =
    [
        ("<-", "←"),
        ("xx", "×"),
        ("/\\", "×"),
        (":-", "÷"),
        ("*O", "⍟"),
        ("[-", "⌹"),
        ("-]", "⌹"),
        ("OO", "○"),
        ("77", "⌈"),
        ("FF", "⌈"),
        ("||", "⌊"),
        ("LL", "⌊"),
        ("|_", "⊥"),
        ("TT", "⊤"),
        ("-|", "⊣"),
        ("|-", "⊢"),
        ("/=", "≠"),
        ("L-", "≠"),
        ("<=", "≤"),
        ("<_", "≤"),
        (">=", "≥"),
        (">_", "≥"),
        ("==", "≡"),
        ("=_", "≡"),
        ("7=", "≢"),
        ("Z-", "≢"),
        ("vv", "∨"),
        ("^^", "∧"),
        ("^~", "⍲"),
        ("~^", "⍲"),
        ("v~", "⍱"),
        ("~v", "⍱"),
        ("^|", "↑"),
        ("v|", "↓"),
        ("((", "⊂"),
        ("cc", "⊂"),
        ("))", "⊃"),
        ("(_", "⊆"),
        ("c_", "⊆"),
        ("[|", "⌷"),
        ("|]", "⌷"),
        ("A|", "⍋"),
        ("V|", "⍒"),
        ("ii", "⍳"),
        ("i_", "⍸"),
        ("ee", "∊"),
        ("e_", "⍷"),
        ("uu", "∪"),
        ("UU", "∪"),
        ("nn", "∩"),
        ("-/", "⌿"),
        ("/-", "⌿"),
        ("\\-", "⍀"),
        ("-\\", "⍀"),
        (",-", "⍪"),
        ("-,", "⍪"),
        ("rr", "⍴"),
        ("pp", "⍴"),
        ("|O", "⌽"),
        ("O|", "⌽"),
        ("O-", "⊖"),
        ("-O", "⊖"),
        ("O\\", "⍉"),
        ("\\O", "⍉"),
        ("::", "¨"),
        (":~", "⍨"),
        (":*", "⍣"),
        ("oo", "∘"),
        (":o", "⍤"),
        (":O", "⍥"),
        ("[]", "⎕"),
        ("['", "⍞"),
        ("']", "⍞"),
        ("[:", "⍠"),
        (":]", "⍠"),
        ("[=", "⌸"),
        ("=]", "⌸"),
        ("[<", "⌺"),
        (">]", "⌺"),
        ("II", "⌶"),
        ("T_", "⌶"),
        ("o_", "⍎"),
        ("_o", "⍎"),
        ("oT", "⍕"),
        ("To", "⍕"),
        ("o-", "⍕"),
        ("-o", "⍕"),
        ("<>", "⋄"),
        ("^v", "⋄"),
        ("v^", "⋄"),
        ("on", "⍝"),
        ("no", "⍝"),
        ("ww", "⍵"),
        ("aa", "⍺"),
        ("VV", "∇"),
        ("v-", "∇"),
        ("-v", "∇"),
        ("--", "¯"),
        ("~0", "⍬"),
        ("``", "⋄"),
        ("`~", "⌺"),
        ("`1", "¨"),
        ("`!", "⌶"),
        ("`2", "¯"),
        ("`@", "⍫"),
        ("`3", "<"),
        ("`#", "⍒"),
        ("`4", "≤"),
        ("`$", "⍋"),
        ("`5", "="),
        ("`%", "⌽"),
        ("`6", "≥"),
        ("`^", "⍉"),
        ("`7", ">"),
        ("`&", "⊖"),
        ("`8", "≠"),
        ("`*", "⍟"),
        ("`9", "∨"),
        ("`(", "⍱"),
        ("`0", "∧"),
        ("`)", "⍲"),
        ("`-", "×"),
        ("`_", "!"),
        ("`=", "÷"),
        ("`q", "?"),
        ("`Q", "⍰"),
        ("`w", "⍵"),
        ("`W", "⍹"),
        ("`e", "∊"),
        ("`E", "⍷"),
        ("`r", "⍴"),
        ("`R", "⌾"),
        ("`t", "~"),
        ("`T", "⍨"),
        ("`y", "↑"),
        ("`Y", "↑"),
        ("`u", "↓"),
        ("`U", "↓"),
        ("`i", "⍳"),
        ("`I", "⍸"),
        ("`o", "○"),
        ("`O", "⍥"),
        ("`p", "*"),
        ("`P", "⍣"),
        ("`[", "←"),
        ("`{", "⍞"),
        ("`]", "→"),
        ("`}", "⍬"),
        ("`\\", "⊢"),
        ("`a", "⍺"),
        ("`A", "⍶"),
        ("`s", "⌈"),
        ("`S", "⌈"),
        ("`d", "⌊"),
        ("`D", "⌊"),
        ("`f", "_"),
        ("`F", "_"),
        ("`g", "∇"),
        ("`G", "⍢"),
        ("`h", "∆"),
        ("`H", "∆"),
        ("`j", "∘"),
        ("`J", "⍤"),
        ("`k", "'"),
        ("`K", "⌸"),
        ("`l", "⎕"),
        ("`L", "⌷"),
        ("`;", "⍎"),
        ("`:", "≡"),
        ("`'", "⍕"),
        ("`\"", "≢"),
        ("`z", "⊂"),
        ("`Z", "⊆"),
        ("`x", "⊃"),
        ("`X", "⊃"),
        ("`c", "∩"),
        ("`C", "∩"),
        ("`v", "∪"),
        ("`V", "∪"),
        ("`b", "⊥"),
        ("`B", "⍭"),
        ("`n", "⊤"),
        ("`N", "⍡"),
        ("`m", "|"),
        ("`M", "∥"),
        ("`,", "⍝"),
        ("`<", "⍪"),
        ("`.", "⍀"),
        ("`>", "⍙"),
        ("`/", "⌿"),
        ("`?", "⍠")
    ]

completeGlyph :: CompletionFunc IO -- don't really need IO here, but some monad is necessary

completeGlyph (x, y) =
    case matchedGlyph of
        Nothing -> return (x, [])
        Just s -> return (drop 2 x, [Completion s "" False])
    where matchedGlyph = if length x < 2
                         then Nothing
                         else lookup (reverse . take 2 $ x) glyphs
